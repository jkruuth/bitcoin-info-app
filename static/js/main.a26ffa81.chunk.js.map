{"version":3,"sources":["components/DownwardTrend.js","components/HighestVolume.js","components/OptimalDay.js","App.js","index.js"],"names":["decreasing","obj","index","streak","i","prices","length","countStreak","currentBest","DownwardTrend","fetchedData","className","HighestVolume","getDayMonthYear","highestTradingVol","date","total_volumes","price","OptimalDay","tempObj","push","lowestPrice","lowestDay","highestPrice","indexOf","highestDay","showData","BitcoinData","Object","keys","timestamp","Date","getFullYear","getMonth","getDate","App","useState","setFetchedData","fromDate","setFromDate","toDate","setToDate","fetchData","a","oneHour","fromQuery","getTime","toQuery","alert","axios","get","res","data","forEach","key","differenceInDays","property","Array","isArray","console","log","onSubmit","event","preventDefault","type","value","placeholder","onChange","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a26ffa81.chunk.js","sourcesContent":["/*\r\n  Component counts the maximum amount of days  bitcoin's price was decreasing in a row\r\n*/\r\nconst DownwardTrend = ({ fetchedData }) => {\r\n  \r\n  const streak = countStreak(fetchedData)\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <h3>The maximum amount of days bitcoinÂ´s price was decreasing in a row</h3>\r\n            <p>Amount of days: {streak}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n/*\r\n  Calculates the length of a bearish trend\r\n*/\r\nexport const decreasing = (obj, index) => {\r\n  let streak = 1\r\n  for (let i = index; i < obj.prices.length-1; i++) {\r\n    if (obj.prices[i][1] >= obj.prices[i+1][1]) streak++\r\n    else break    \r\n  }\r\n\r\n    return streak\r\n}\r\n\r\n/*\r\n  Finds the length of the longest descending subset from the array\r\n*/\r\nexport const countStreak = obj => {\r\n  let currentBest = 0\r\n  let streak = 1\r\n\r\n  for (let i = 0; i < obj.prices.length; i+=streak) {\r\n    streak = decreasing(obj, i)\r\n    if (streak > currentBest) currentBest = streak\r\n  }\r\n\r\n  return currentBest > 0 ? currentBest - 1 : currentBest\r\n}\r\n\r\nexport default DownwardTrend","/* \r\n    Component finds the date with highest trading volume from the user given date range\r\n*/\r\nconst HighestVolume = ({ fetchedData, getDayMonthYear }) => {\r\n    const highestTradingVol = {\r\n        date: fetchedData.total_volumes[0][0],\r\n        price: fetchedData.total_volumes[0][1]\r\n    }\r\n\r\n    for (let i = 1; i < fetchedData.total_volumes.length; i++) {\r\n        if (fetchedData.total_volumes[i][1] > highestTradingVol.price) {\r\n            highestTradingVol.date = fetchedData.total_volumes[i][0]\r\n            highestTradingVol.price = fetchedData.total_volumes[i][1]\r\n        }\r\n      }\r\n\r\n    return (\r\n        <div className=\"content\">\r\n         <h3>The date with the highest trading volume and the volume on that day in euros</h3>\r\n         <p>Date: {getDayMonthYear(highestTradingVol.date)}</p>\r\n         <p>Volume in euros: {highestTradingVol.price}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HighestVolume","import { countStreak } from \"./DownwardTrend\"\r\n\r\n/*\r\n    Component finds optimal days to buy and sell bitcoin based on days price\r\n*/\r\nconst OptimalDay = ({ fetchedData, getDayMonthYear }) => {\r\n\r\n    let tempObj = {\r\n        prices: [],\r\n        date: []\r\n    }\r\n\r\n    for (let i = 0; i < fetchedData.prices.length; i++) {\r\n        tempObj.prices.push(fetchedData.prices[i][1])\r\n        tempObj.date.push(fetchedData.prices[i][0])\r\n    }\r\n\r\n    let lowestPrice = tempObj.prices[0]\r\n    let lowestDay = tempObj.date[0]\r\n\r\n\r\n    for (let i = 1; i < tempObj.prices.length; i++) {\r\n        if (tempObj.prices[i] < lowestPrice) { \r\n            lowestPrice = tempObj.prices[i]\r\n            lowestDay = tempObj.date[i]\r\n        }\r\n    }\r\n    \r\n    let highestPrice = tempObj.prices.indexOf(lowestPrice)\r\n    let highestDay = tempObj.date.indexOf(lowestDay)\r\n\r\n    for (let i = tempObj.prices.indexOf(lowestPrice); i < tempObj.prices.length; i++) {\r\n        if (tempObj.prices[i] > highestPrice) {\r\n            highestPrice = tempObj.prices[i]\r\n            highestDay = tempObj.date[i]\r\n        } \r\n    }\r\n\r\n    const streak = countStreak(fetchedData)\r\n    const showData = streak === fetchedData.prices.length || lowestDay === highestDay\r\n        ? 'You should not buy or sell on any given day' \r\n        : getDayMonthYear(lowestDay) + ' and ' + getDayMonthYear(highestDay)\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <h3>A pair of days: The day to buy and the day to sell</h3>\r\n            <p>{showData}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OptimalDay","import { useState } from \"react\";\r\nimport axios from \"axios\"\r\nimport DownwardTrend from \"./components/DownwardTrend\";\r\nimport HighestVolume from \"./components/HighestVolume\";\r\nimport OptimalDay from \"./components/OptimalDay\";\r\nimport \"./App.css\"\r\n\r\n/* \r\n  Initializes components with functionality. Component also checks \r\n*/\r\nconst BitcoinData = ({ fetchedData })  => {\r\n  \r\n  if (Object.keys(fetchedData).length === 0 || (fetchedData.prices.length === 1)) {\r\n    return <p>Not enough fetched data</p>  \r\n  } \r\n\r\n  /*\r\n    Converts timestamp to valid (YYYY-MM-DD) format \r\n  */\r\n  const getDayMonthYear = (timestamp) => {\r\n    const date = new Date(timestamp)\r\n\r\n    return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`\r\n  }\r\n\r\n  return (\r\n    <div>\r\n     <div className=\"content_wrapper\">\r\n      <DownwardTrend fetchedData={fetchedData}/>\r\n      <HighestVolume fetchedData={fetchedData} getDayMonthYear={getDayMonthYear} />\r\n      <OptimalDay fetchedData={fetchedData} getDayMonthYear={getDayMonthYear}/>\r\n     </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n/*\r\n  Initializes application. App() includes current states and passes them to components.\r\n*/\r\nconst App = () => {\r\n  \r\n  const [fetchedData, setFetchedData] = useState({})\r\n  const [fromDate, setFromDate] = useState('')\r\n  const [toDate, setToDate] = useState('')\r\n\r\n  /*\r\n    Fetches data from the API \r\n  */\r\n  const fetchData = async () => {\r\n    const oneHour = 3600\r\n\r\n    const fromQuery = new Date(fromDate).getTime() / 1000\r\n    const toQuery = new Date(toDate).getTime() / 1000\r\n\r\n    if (fromQuery > toQuery) {\r\n      alert('\"To\" date can not be before \"from\" date')\r\n      setFromDate('')\r\n      setToDate('')\r\n      return\r\n    }\r\n    try {\r\n      const res = await axios.get(`https://api.coingecko.com/api/v3/coins/bitcoin/market_chart/range?vs_currency=eur&from=${fromQuery}&to=${toQuery + oneHour}`)\r\n      const { data } = res\r\n    \r\n      let tempObj = {}\r\n\r\n      Object.keys(data).forEach(key => tempObj[key] = data[key])\r\n\r\n      const timestampDifference = toQuery*1000 - fromQuery*1000\r\n      const differenceInDays = timestampDifference / (1000 * 3600 * 24)\r\n    \r\n      if (differenceInDays < 2) {\r\n        for (const property in data) {\r\n          if (Array.isArray(tempObj[property])) {\r\n            tempObj[property] = []\r\n            tempObj[property].push(data[property][0])\r\n            tempObj[property].push(data[property][24])\r\n          }\r\n        }\r\n      } else if (differenceInDays >= 2 && differenceInDays <= 90) {\r\n        for (const property in data) {\r\n          if (Array.isArray(tempObj[property])) {\r\n            tempObj[property] = []\r\n            for (let i = 0; i < data[property].length; i += 24) {\r\n              tempObj[property].push(data[property][i])\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      setFetchedData(tempObj)\r\n\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n    \r\n    setFromDate('')\r\n    setToDate('')\r\n  }\r\n\r\n  /*\r\n    Function handles the user given input and updates the right states\r\n  */\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n\r\n    if (!fromDate || !toDate) {\r\n      setFromDate('')\r\n      setToDate('')\r\n      return\r\n    }\r\n\r\n    fetchData()\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Bitcoin info app</h1>\r\n\r\n      <h2>Enter the desired time interval </h2>\r\n      \r\n      <form onSubmit={handleSubmit} >\r\n        <div>\r\n          from\r\n          <input\r\n            type=\"date\"\r\n            value={fromDate}\r\n            placeholder=\"YYYY-MM-DD\"\r\n            onChange = {({ target }) => setFromDate(target.value)} \r\n          />\r\n          to\r\n          <input \r\n            type=\"date\"\r\n            value={toDate}\r\n            placeholder=\"YYYY-MM-DD\"\r\n            onChange = {({ target }) => setToDate(target.value)} \r\n          />\r\n        </div>\r\n        <button type='submit'>search</button>\r\n      </form>\r\n    <BitcoinData fetchedData={fetchedData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}